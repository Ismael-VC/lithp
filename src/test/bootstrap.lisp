(def eval (lambda (e a)
            (cond
             ((atom e) (assoc e a))
             ((atom (car e))
              (cond
               ((eq (car e) (quote quote)) (cadr e))
               ((eq (car e) (quote atom))  (atom   (eval (cadr e) a)))
               ((eq (car e) (quote eq))    (eq     (eval (cadr e) a)
                                                   (eval (caddr e) a)))
               ((eq (car e) (quote car))   (car    (eval (cadr e) a)))
               ((eq (car e) (quote cdr))   (cdr    (eval (cadr e) a)))
               ((eq (car e) (quote cons))  (cons   (eval (cadr e) a)
                                                   (eval (caddr e) a)))
               ((eq (car e) (quote cond))  (evcon (cdr e) a))
               (t (eval (cons (assoc (car e) a)
                              (cdr e))
                        a))))
             ((eq (caar e) (quote def))
              (eval (cons (caddar e) (cdr e))
                    (cons (list (cadar e) (car e)) a)))
             ((eq (caar e) (quote lambda))
              (eval (caddar e)
                    (append (pair (cadar e) (evlis (cdr e) a))
                            a))))))

(def evcon (lambda (evcon_c evcon_a)
             (cond ((eval (caar evcon_c) evcon_a)
                    (eval (cadar evcon_c) evcon_a))
                   (t (evcon (cdr evcon_c) evcon_a)))))

(def evlis (lambda (evlis_m evlis_a)
             (cond ((null evlis_m) nil)
                   (t (cons (eval  (car evlis_m) evlis_a)
                            (evlis (cdr evlis_m) evlis_a))))))
